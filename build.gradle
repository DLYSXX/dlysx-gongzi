buildscript {
    ext {
        // Automatically generated source code output address
        openApiOutputDir = "$rootDir/build/generated/openapi"
        apiPackagePath = "cn.dlysxx.www.dlysxx.gongzi.api"
        modelPackagePath = "cn.dlysxx.www.dlysxx.gongzi.model"
    }
}

plugins {
    id 'org.springframework.boot' version "${springbootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagement}"
    id "org.openapi.generator" version "${openapiGenerator}"
    id "org.jetbrains.gradle.plugin.idea-ext" version "$gradleIdeaExtVersion"
    id 'java'
    id 'application'
}

group = 'cn.dlysxx.www'
version = "${projectVersion}"
sourceCompatibility = "${sourceCompatibility}"

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

openApiGenerate {
    generatorName = "spring"
    validateSpec = true
    inputSpec = "$rootDir/specs/openapi.yml".toString()
    outputDir = "$openApiOutputDir"
    apiPackage = "${apiPackagePath}"
    modelPackage = "${modelPackagePath}"
    configOptions = [
            dateLibrary    : "java8-localdatetime",
            delegatePattern: "true",
            useTags        : "true"
    ]
}

idea.project.settings {
    // IntelliJ's build is set to execute automatic generation during synchronous processing
    taskTriggers {
        beforeBuild tasks.getByName("openApiGenerate")
        beforeRebuild tasks.getByName("openApiGenerate")
        afterSync tasks.getByName("openApiGenerate")
        beforeSync tasks.getByName("openApiGenerate")
    }
}

compileJava {
    // Set to perform automatic generation when compiling tasks
    dependsOn  tasks.openApiGenerate
    source "$openApiOutputDir/src/main/java"
}

compileTestJava {
    source "$openApiOutputDir/src/test/java"
}

// Add automatically generated source code to the source directory
sourceSets.main.java.srcDirs += ["$openApiOutputDir/src/main/java"]

dependencies {
    implementation files('libs/Spire.Xls.jar')
    implementation "org.springframework.boot:spring-boot-starter:${springbootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-mail:${springbootVersion}"
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "${springbootVersion}"
    developmentOnly "org.springframework.boot:spring-boot-devtools:${springbootVersion}"
    implementation "io.springfox:springfox-swagger2:${springfoxSwagger2}"
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullable}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springbootVersion}"
    implementation "org.springframework.boot:spring-boot-maven-plugin:${springbootVersion}"
    implementation "cn.dlysxx.www.common:dlysxx-common:${dlysxxCommon}"
    implementation "javax.validation:validation-api:${validationApi}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonDataformatYaml}"

}

tasks.named('test') {
    useJUnitPlatform()
}

mainClassName = 'cn.dlysxx.www.dlysxx.gongzi.DlysxxGongziApplication'